; -*- lisp -*-
;; file tmacro-2.melt

#| run in buildir/gcc
 ln -sv $GCCMELT_SOURCE/gcc/testsuite/melt/tmacro-2.melt
 ./cc1 -fmelt-mode=rundebug @meltbuild-common.args \
    -fmelt-keep-temporary-files \
    -fmelt-init=@warmelt.quicklybuilt \
    -fmelt-arg=tmacro-2.melt \
    -fmelt-debug meltbuild-empty-file.c
|#

(defmacro bitup2 (sexp env mexpander modctx)
  (debug "macro bitup2 sexp=" sexp " modctx=" modctx)
  (shortbacktrace_dbg "bitup2" 15)
  ;; sexp is the entire (bitup ...) s-expression
  (assert_msg "check sexp" (is_a sexp class_sexpr) sexp)
  (let ( 
	(sloc (get_field :loca_location sexp))
	(scont (get_field :sexp_contents sexp))
	)
    (assert_msg "check scont" (is_list scont) scont sloc sexp)
    (let ( 
	  (tcont (list_to_multiple scont discr_multiple))
	  (:long tcontlen (multiple_length tcont))
	  )
      (assert_msg "check tcont" (is_multiple tcont) tcont scont)
      (assert_msg "check tcontlen" (>i tcontlen 0) tcontlen tcont)
      (debug "bitup2 tcont=" tcont)
      (when (!=i tcontlen 2)
	(error_plain sloc "bitup2 needs one argument")
	(return))
      (let ( (arg1 (multiple_nth tcont 1))
	     )
	(debug "bitup2 arg1=" arg1)
	(let  (
	       (resexp `(tuple ,arg1 ,arg1))
	       )
	  (debug "bitup2 plain resexp=" resexp)
	  (let ( (mexp (mexpander resexp env mexpander modctx))
		 )
	    (debug "bitup2 mexp=" mexp)
	    (put_fields mexp :loca_location sloc)
	    (debug "bitup2 relocated mexp=" mexp)
	    (return mexp)))))))
	  
;; insane (debug "here bitup2=" bitup2)

(debug "using bitup2:" (bitup2 'a))

;; eof tmacro-2.melt

